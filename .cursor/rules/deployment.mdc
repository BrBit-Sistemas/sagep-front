---
description: Deployment configuration
globs: 
alwaysApply: false
---
# Deploy e Produ√ß√£o

## üöÄ Build de Produ√ß√£o

### Comando de Build

```bash
# Build padr√£o
npm run build

# Build com limpeza pr√©via
npm run re:build

# Verificar build localmente
npm run start
```

### Otimiza√ß√µes Autom√°ticas

O Vite j√° aplica otimiza√ß√µes:
- **Minifica√ß√£o**: CSS e JavaScript
- **Tree shaking**: Remo√ß√£o de c√≥digo n√£o usado
- **Code splitting**: Divis√£o autom√°tica de chunks
- **Asset optimization**: Compress√£o de imagens e fontes

## üåê Vari√°veis de Ambiente

### Desenvolvimento (.env.development)

```bash
# URLs locais
VITE_SERVER_URL=http://localhost:3001
VITE_ASSETS_DIR=/assets

# Chaves de desenvolvimento
VITE_MAPBOX_API_KEY=pk.dev_key
VITE_FIREBASE_API_KEY=dev_firebase_key
```

### Produ√ß√£o (.env.production)

```bash
# URLs de produ√ß√£o
VITE_SERVER_URL=https://api.meuapp.com
VITE_ASSETS_DIR=https://cdn.meuapp.com/assets

# Chaves de produ√ß√£o
VITE_MAPBOX_API_KEY=pk.production_key
VITE_FIREBASE_API_KEY=prod_firebase_key

# Configura√ß√µes de produ√ß√£o
VITE_ENV=production
VITE_DEBUG=false
```

### Acesso √†s Vari√°veis

```typescript
// Em qualquer lugar do c√≥digo
const apiUrl = import.meta.env.VITE_SERVER_URL;
const isDev = import.meta.env.DEV;
const isProd = import.meta.env.PROD;
```

## üîß Configura√ß√µes de Deploy

### Vercel

1. **Instale Vercel CLI**:
```bash
npm install -g vercel
```

2. **Configure vercel.json**:
```json
{
  "name": "meu-app",
  "version": 2,
  "builds": [
    {
      "src": "package.json",
      "use": "@vercel/static-build",
      "config": {
        "distDir": "dist"
      }
    }
  ],
  "env": {
    "VITE_SERVER_URL": "@server-url-prod"
  }
}
```

3. **Deploy**:
```bash
vercel --prod
```

### Netlify

1. **netlify.toml**:
```toml
[build]
  publish = "dist"
  command = "npm run build"

[build.environment]
  NODE_VERSION = "20"

[[redirects]]
  from = "/*"
  to = "/index.html"
  status = 200
```

2. **Deploy via CLI**:
```bash
npm install -g netlify-cli
netlify deploy --prod --dir=dist
```

### Nginx (Servidor pr√≥prio)

```nginx
server {
    listen 80;
    server_name meuapp.com;
    root /var/www/meuapp/dist;
    index index.html;

    # Compression
    gzip on;
    gzip_types text/plain text/css application/javascript;

    # Cache assets
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
    }

    # SPA routing
    location / {
        try_files $uri $uri/ /index.html;
    }

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-Content-Type-Options "nosniff";
    add_header X-XSS-Protection "1; mode=block";
}
```

### Docker

```dockerfile
# Build stage
FROM node:20-alpine AS builder
WORKDIR /app
COPY package*.json ./
RUN npm ci --only=production
COPY . .
RUN npm run build

# Production stage
FROM nginx:alpine
COPY --from=builder /app/dist /usr/share/nginx/html
COPY nginx.conf /etc/nginx/nginx.conf
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
```

## üîí Seguran√ßa

### Vari√°veis Sens√≠veis

‚ö†Ô∏è **Nunca exponha chaves secretas no frontend!**

```bash
# ‚ùå Errado - exposto no bundle
VITE_SECRET_KEY=minha_chave_secreta

# ‚úÖ Correto - s√≥ no backend
SECRET_KEY=minha_chave_secreta  # sem VITE_
```

### Headers de Seguran√ßa

Configure no servidor:

```bash
# Content Security Policy
Content-Security-Policy: default-src 'self'; script-src 'self' 'unsafe-inline'

# HTTPS Strict Transport Security
Strict-Transport-Security: max-age=31536000; includeSubDomains

# Prevent clickjacking
X-Frame-Options: DENY

# Prevent MIME sniffing
X-Content-Type-Options: nosniff
```

## üìä Monitoramento

### Analytics

```typescript
// Google Analytics
import { gtag } from 'src/utils/gtag';

// Track page views
gtag('config', 'GA_TRACKING_ID', {
  page_title: document.title,
  page_location: window.location.href,
});

// Track events
gtag('event', 'click', {
  event_category: 'button',
  event_label: 'header-cta',
});
```

### Error Tracking

```typescript
// Sentry
import * as Sentry from '@sentry/react';

Sentry.init({
  dsn: import.meta.env.VITE_SENTRY_DSN,
  environment: import.meta.env.MODE,
});

// Capture errors
try {
  // c√≥digo
} catch (error) {
  Sentry.captureException(error);
}
```

## üéØ Performance de Produ√ß√£o

### M√©tricas Importantes

- **First Contentful Paint (FCP)**: < 1.8s
- **Largest Contentful Paint (LCP)**: < 2.5s
- **Cumulative Layout Shift (CLS)**: < 0.1
- **Time to Interactive (TTI)**: < 3.5s

### Otimiza√ß√µes

1. **Lazy Loading**:
```typescript
const LazyComponent = lazy(() => import('./heavy-component'));
```

2. **Image Optimization**:
```typescript
// Use WebP quando poss√≠vel
<img 
  src="image.webp" 
  alt="Description"
  loading="lazy"
  decoding="async"
/>
```

3. **Bundle Analysis**:
```bash
npm install -g vite-bundle-analyzer
npx vite-bundle-analyzer
```

## üîÑ CI/CD

### GitHub Actions

```yaml
# .github/workflows/deploy.yml
name: Deploy

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests
        run: npm test
      
      - name: Build
        run: npm run build
        env:
          VITE_SERVER_URL: ${{ secrets.SERVER_URL }}
      
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.ORG_ID }}
          vercel-project-id: ${{ secrets.PROJECT_ID }}
          vercel-args: '--prod'
```

## üö® Troubleshooting

### Problemas Comuns

1. **Build falhando**:
```bash
# Limpar cache
npm run clean
rm -rf .vite dist

# Reinstalar depend√™ncias
npm install
```

2. **Vari√°veis de ambiente n√£o funcionam**:
- Verifique se come√ßam com `VITE_`
- Reinicie o servidor ap√≥s mudan√ßas
- Verifique se est√£o no arquivo .env correto

3. **Roteamento SPA n√£o funciona**:
- Configure fallback para index.html no servidor
- Verifique configura√ß√£o do nginx/apache
- Use `Router` com `basename` se necess√°rio

4. **Performance ruim**:
- Analise bundle size
- Implemente lazy loading
- Otimize imagens e assets
- Use CDN para assets est√°ticos
