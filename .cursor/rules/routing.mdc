---
description: Routing reference
globs: 
alwaysApply: false
---
# Sistema de Rotas

## üõ£Ô∏è Estrutura de Rotas

O template usa React Router 7 com estrutura organizada em [src/routes/](mdc:sagep-roraima-ui/sagep-roraima-ui/sagep-front/src/routes).

### üìç Defini√ß√£o de Paths

As rotas s√£o centralizadas em [paths.ts](mdc:sagep-roraima-ui/sagep-roraima-ui/sagep-front/src/routes/paths.ts):

```typescript
export const paths = {
  // P√°ginas p√∫blicas
  faqs: '/faqs',
  
  // Autentica√ß√£o
  auth: {
    jwt: {
      signIn: '/auth/jwt/sign-in',
      signUp: '/auth/jwt/sign-up',
    },
    firebase: {
      signIn: '/auth/firebase/sign-in',
      // ...
    }
  },
  
  // Dashboard
  dashboard: {
    root: '/dashboard',
    analytics: '/dashboard/analytics',
    ecommerce: '/dashboard/ecommerce',
    // Grupos aninhados
    group: {
      root: '/dashboard/group',
      five: '/dashboard/group/five',
    }
  }
};
```

### üéØ Como Adicionar Novas Rotas

#### 1. Defina o Path

```typescript
// Em paths.ts
export const paths = {
  dashboard: {
    // ... existentes
    minhaNovaRota: '/dashboard/minha-nova-rota',
    meuModulo: {
      root: '/dashboard/meu-modulo',
      lista: '/dashboard/meu-modulo/lista',
      criar: '/dashboard/meu-modulo/criar',
      editar: (id: string) => `/dashboard/meu-modulo/${id}/edit`,
    }
  }
};
```

#### 2. Crie a P√°gina

```tsx
// src/pages/dashboard/minha-nova-page.tsx
import { DashboardContent } from 'src/layouts/dashboard';

export default function MinhaNovaPage() {
  return (
    <DashboardContent>
      <h1>Minha Nova P√°gina</h1>
    </DashboardContent>
  );
}
```

#### 3. Configure a Rota

```tsx
// No sistema de rotas
{
  path: paths.dashboard.minhaNovaRota,
  element: <MinhaNovaPage />
}
```

## üîê Prote√ß√£o de Rotas

### AuthGuard - Rotas Privadas

```tsx
import { AuthGuard } from 'src/auth/guard';

// Rota que precisa de autentica√ß√£o
<Route 
  path="/dashboard" 
  element={
    <AuthGuard>
      <DashboardLayout>
        <DashboardPage />
      </DashboardLayout>
    </AuthGuard>
  } 
/>
```

### GuestGuard - Rotas P√∫blicas

```tsx
import { GuestGuard } from 'src/auth/guard';

// Rota s√≥ para usu√°rios n√£o logados
<Route 
  path="/auth/login" 
  element={
    <GuestGuard>
      <LoginPage />
    </GuestGuard>
  } 
/>
```

### RoleBasedGuard - Por Permiss√£o

```tsx
import { RoleBasedGuard } from 'src/auth/guard';

// Rota por papel/permiss√£o
<Route 
  path="/admin" 
  element={
    <RoleBasedGuard hasContent roles={['admin']}>
      <AdminPage />
    </RoleBasedGuard>
  } 
/>
```

## üß≠ Navega√ß√£o

### Hook de Navega√ß√£o

```tsx
import { useRouter } from 'src/routes/hooks';

const router = useRouter();

// Navegar programaticamente
router.push(paths.dashboard.analytics);
router.replace(paths.auth.signIn);
router.back();

// Com par√¢metros
router.push(`${paths.dashboard.user}/${userId}`);
```

### Componente Link

```tsx
import { RouterLink } from 'src/routes/components';

<RouterLink href={paths.dashboard.analytics}>
  Ir para Analytics
</RouterLink>
```

## üìä Breadcrumbs

### Configura√ß√£o Autom√°tica

```tsx
import { CustomBreadcrumbs } from 'src/components/custom-breadcrumbs';

<CustomBreadcrumbs
  heading="P√°gina Atual"
  links={[
    { name: 'Dashboard', href: paths.dashboard.root },
    { name: 'M√≥dulo', href: paths.dashboard.modulo },
    { name: 'P√°gina Atual' }
  ]}
/>
```

### Breadcrumbs Din√¢micos

```tsx
// Baseado na rota atual
const breadcrumbs = useBreadcrumbs();

<CustomBreadcrumbs
  heading={pageTitle}
  links={breadcrumbs}
/>
```

## üîÑ Lazy Loading

### Componentes Ass√≠ncronos

```tsx
import { lazy, Suspense } from 'react';
import { LoadingScreen } from 'src/components/loading-screen';

const MinhaPage = lazy(() => import('src/pages/minha-page'));

// Na rota
<Route 
  path="/minha-page" 
  element={
    <Suspense fallback={<LoadingScreen />}>
      <MinhaPage />
    </Suspense>
  } 
/>
```

### Code Splitting por M√≥dulo

```tsx
// Carregamento por m√≥dulo
const DashboardPages = lazy(() => import('src/pages/dashboard'));
const AuthPages = lazy(() => import('src/pages/auth'));
```

## üéØ Roteamento Avan√ßado

### Par√¢metros de Rota

```tsx
// Defini√ß√£o
{ path: '/user/:id', element: <UserPage /> }

// Uso
import { useParams } from 'react-router-dom';

const { id } = useParams();
```

### Query Parameters

```tsx
import { useSearchParams } from 'react-router-dom';

const [searchParams, setSearchParams] = useSearchParams();

// Ler par√¢metro
const tab = searchParams.get('tab');

// Definir par√¢metro
setSearchParams({ tab: 'profile' });
```

### Redirects

```tsx
// Redirect padr√£o
<Route path="/" element={<Navigate to={paths.dashboard.root} replace />} />

// Redirect condicional
function ConditionalRedirect() {
  const { authenticated } = useAuthContext();
  
  if (!authenticated) {
    return <Navigate to={paths.auth.signIn} replace />;
  }
  
  return <DashboardPage />;
}
```

## üõ†Ô∏è Configura√ß√µes Avan√ßadas

### Base URL

```tsx
// Para apps em subpastas
<Router basename="/minha-app">
  <Routes>
    {/* rotas */}
  </Routes>
</Router>
```

### Scroll Restoration

```tsx
// Comportamento de scroll autom√°tico
window.scrollTo(0, 0);
```

### Progress Bar na Navega√ß√£o

O template inclui progress bar autom√°tico durante navega√ß√£o - configurado em [src/components/progress-bar/](mdc:sagep-roraima-ui/sagep-roraima-ui/sagep-front/src/components/progress-bar).
