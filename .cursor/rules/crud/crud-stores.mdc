# üóÑÔ∏è Stores CRUD com Zustand - SAGEP

## üìù Estrutura do Store (stores/{feature}-cadastro-store.ts)

### Template Obrigat√≥rio

```typescript
import type { {Feature} } from '../types';
import { create } from 'zustand';

type {Feature}CadastroStore = {
  // Estado do formul√°rio
  isFormDialogOpen: boolean;
  openCreateDialog: () => void;
  closeCreateDialog: () => void;
  openEditDialog: (item: {Feature}) => void;
  closeEditDialog: () => void;

  // Estado do dialog de exclus√£o
  isDeleteDialogOpen: boolean;
  openDeleteDialog: (item: {Feature}) => void;
  closeDeleteDialog: () => void;

  // Item selecionado
  selected{Feature}: {Feature} | null;
  setSelected{Feature}: (item: {Feature} | null) => void;
};

export const use{Feature}CadastroStore = create<{Feature}CadastroStore>((set) => ({
  // Form dialog state
  isFormDialogOpen: false,
  openCreateDialog: () => set({ isFormDialogOpen: true, selected{Feature}: null }),
  closeCreateDialog: () => set({ isFormDialogOpen: false, selected{Feature}: null }),
  openEditDialog: (item) => set({ isFormDialogOpen: true, selected{Feature}: item }),
  closeEditDialog: () => set({ isFormDialogOpen: false, selected{Feature}: null }),

  // Delete dialog state
  isDeleteDialogOpen: false,
  openDeleteDialog: (item) => set({ isDeleteDialogOpen: true, selected{Feature}: item }),
  closeDeleteDialog: () => set({ isDeleteDialogOpen: false, selected{Feature}: null }),

  // Selected item
  selected{Feature}: null,
  setSelected{Feature}: (item) => set({ selected{Feature}: item }),
}));
```

### Exemplo Completo (Detento)

```typescript
import type { Detento } from "../types";
import { create } from "zustand";

type DetentoCadastroStore = {
  isFormDialogOpen: boolean;
  openCreateDialog: () => void;
  closeCreateDialog: () => void;
  openEditDialog: (detento: Detento) => void;
  closeEditDialog: () => void;

  isDeleteDialogOpen: boolean;
  openDeleteDialog: (detento: Detento) => void;
  closeDeleteDialog: () => void;

  selectedDetento: Detento | null;
  setSelectedDetento: (detento: Detento | null) => void;
};

export const useDetentoCadastroStore = create<DetentoCadastroStore>((set) => ({
  isFormDialogOpen: false,
  openCreateDialog: () =>
    set({ isFormDialogOpen: true, selectedDetento: null }),
  closeCreateDialog: () =>
    set({ isFormDialogOpen: false, selectedDetento: null }),
  openEditDialog: (detento) =>
    set({ isFormDialogOpen: true, selectedDetento: detento }),
  closeEditDialog: () =>
    set({ isFormDialogOpen: false, selectedDetento: null }),

  isDeleteDialogOpen: false,
  openDeleteDialog: (detento) =>
    set({ isDeleteDialogOpen: true, selectedDetento: detento }),
  closeDeleteDialog: () =>
    set({ isDeleteDialogOpen: false, selectedDetento: null }),

  selectedDetento: null,
  setSelectedDetento: (detento) => set({ selectedDetento: detento }),
}));
```

## üéØ Responsabilidades do Store

### ‚úÖ O que DEVE estar no store

1. **Estado dos modals/dialogs**

   - `isFormDialogOpen` - controla dialog de formul√°rio
   - `isDeleteDialogOpen` - controla dialog de confirma√ß√£o de exclus√£o

2. **A√ß√µes para modais**

   - `openCreateDialog` - abre modal para cria√ß√£o (limpa sele√ß√£o)
   - `closeCreateDialog` - fecha modal de cria√ß√£o
   - `openEditDialog` - abre modal para edi√ß√£o (define item selecionado)
   - `closeEditDialog` - fecha modal de edi√ß√£o
   - `openDeleteDialog` - abre modal de confirma√ß√£o de exclus√£o
   - `closeDeleteDialog` - fecha modal de exclus√£o

3. **Estado do item selecionado**
   - `selected{Feature}` - item atualmente selecionado para edi√ß√£o/exclus√£o
   - `setSelected{Feature}` - setter para o item selecionado

### ‚ùå O que N√ÉO deve estar no store

1. **Dados da API** - use React Query
2. **Estado de loading** - use React Query
3. **Estado do formul√°rio** - use React Hook Form
4. **Par√¢metros de busca/filtros** - use URL search params
5. **Estado da tabela** - use DataGrid interno

## üîß Padr√µes de Uso

### Na P√°gina Principal

```typescript
export default function {Feature}CadastroPage() {
  const { selected{Feature}, isFormDialogOpen, openCreateDialog, closeCreateDialog } =
    use{Feature}CadastroStore();

  return (
    <DashboardContent>
      {/* Bot√£o de adicionar */}
      <Button onClick={openCreateDialog}>Adicionar</Button>

      {/* DataGrid */}
      <CustomDataGrid />

      {/* Form Dialog */}
      <{Feature}FormDialog
        open={isFormDialogOpen}
        onSuccess={closeCreateDialog}
        onClose={closeCreateDialog}
        {...(selected{Feature} && {
          defaultValues: {feature}ToFormValues(selected{Feature}),
          {feature}Id: selected{Feature}.{feature}_id,
        })}
      />
    </DashboardContent>
  );
}
```

### No Hook da Tabela

```typescript
export const use{Feature}ListTable = () => {
  const { openDeleteDialog, openEditDialog } = use{Feature}CadastroStore();

  const onDelete = useCallback(
    (item: {Feature}) => openDeleteDialog(item),
    [openDeleteDialog]
  );

  const onEdit = useCallback(
    (item: {Feature}) => openEditDialog(item),
    [openEditDialog]
  );

  const columns = useMemo((): GridColDef<{Feature}>[] => [
    // ... colunas
    {
      type: 'actions',
      field: 'actions',
      getActions: (params) => [
        <CustomGridActionsCellItem
          label="Editar"
          onClick={() => onEdit(params.row)}
        />,
        <CustomGridActionsCellItem
          label="Excluir"
          onClick={() => onDelete(params.row)}
        />,
      ],
    },
  ], [onEdit, onDelete]);

  return { columns };
};
```

### No Dialog de Exclus√£o

```typescript
export const {Feature}DeleteDialog = () => {
  const { isDeleteDialogOpen, selected{Feature}, closeDeleteDialog } =
    use{Feature}CadastroStore();

  const { mutateAsync: delete{Feature} } = useDelete{Feature}();

  const handleDelete = async () => {
    if (selected{Feature}) {
      await delete{Feature}(selected{Feature}.{feature}_id);
      closeDeleteDialog();
    }
  };

  return (
    <Dialog open={isDeleteDialogOpen} onClose={closeDeleteDialog}>
      {/* ... conte√∫do do dialog */}
    </Dialog>
  );
};
```

## ‚ö†Ô∏è Regras Obrigat√≥rias

### Nomenclatura

1. **Store**: `use{Feature}CadastroStore`
2. **Tipo**: `{Feature}CadastroStore`
3. **Arquivo**: `{feature}-cadastro-store.ts`
4. **Item selecionado**: `selected{Feature}`

### Estrutura

1. **SEMPRE** implemente TODOS os m√©todos do template
2. **SEMPRE** use a tipagem TypeScript correta
3. **SEMPRE** limpe a sele√ß√£o ao abrir modal de cria√ß√£o
4. **SEMPRE** defina a sele√ß√£o ao abrir modal de edi√ß√£o/exclus√£o
5. **NUNCA** coloque l√≥gica de API no store

### Conven√ß√µes

1. **SEMPRE** use `create` do Zustand
2. **SEMPRE** exporte apenas o hook customizado
3. **SEMPRE** mantenha o estado m√≠nimo e focado em UI
4. **NUNCA** misture responsabilidades (API, forms, etc.)

## üöÄ Template de Gera√ß√£o R√°pida

```typescript
// Para criar um novo store, substitua {Feature} e {feature}:
import type { {Feature} } from '../types';
import { create } from 'zustand';

type {Feature}CadastroStore = {
  isFormDialogOpen: boolean;
  openCreateDialog: () => void;
  closeCreateDialog: () => void;
  openEditDialog: (item: {Feature}) => void;
  closeEditDialog: () => void;
  isDeleteDialogOpen: boolean;
  openDeleteDialog: (item: {Feature}) => void;
  closeDeleteDialog: () => void;
  selected{Feature}: {Feature} | null;
  setSelected{Feature}: (item: {Feature} | null) => void;
};

export const use{Feature}CadastroStore = create<{Feature}CadastroStore>((set) => ({
  isFormDialogOpen: false,
  openCreateDialog: () => set({ isFormDialogOpen: true, selected{Feature}: null }),
  closeCreateDialog: () => set({ isFormDialogOpen: false, selected{Feature}: null }),
  openEditDialog: (item) => set({ isFormDialogOpen: true, selected{Feature}: item }),
  closeEditDialog: () => set({ isFormDialogOpen: false, selected{Feature}: null }),
  isDeleteDialogOpen: false,
  openDeleteDialog: (item) => set({ isDeleteDialogOpen: true, selected{Feature}: item }),
  closeDeleteDialog: () => set({ isDeleteDialogOpen: false, selected{Feature}: null }),
  selected{Feature}: null,
  setSelected{Feature}: (item) => set({ selected{Feature}: item }),
}));
```

description:
globs:
alwaysApply: false

---
