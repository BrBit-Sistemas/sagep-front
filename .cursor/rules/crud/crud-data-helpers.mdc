# üîß Servi√ßos de Dados e Helpers - SAGEP

## üìù Servi√ßo de Dados (data/index.ts)

### Template Obrigat√≥rio (API Real)

```typescript
import type { CrudService, PaginatedParams } from 'src/types';
import type {
  Read{Feature}Dto,
  Create{Feature}Dto,
  Update{Feature}Dto,
} from 'src/api/generated';

import { getSAGEPCoreAPI } from 'src/api/generated';

const api = getSAGEPCoreAPI();

export const {feature}Service: CrudService<
  Read{Feature}Dto,
  Create{Feature}Dto,
  Update{Feature}Dto,
  PaginatedParams
> = {
  paginate: async ({ page, limit }) => api.{feature}FindAll({ page, limit }),
  create: async (data) => api.{feature}Create(data),
  read: async (id) => api.{feature}FindOne(id),
  update: async (id, data) => api.{feature}Update(id, data),
  delete: async (id) => api.{feature}Remove(id),
};
```

## üìù Helpers (helper/index.ts)

### Template Obrigat√≥rio

````typescript
import type { {Feature} } from '../types';
import type { Create{Feature}Schema } from '../schemas';

// Fun√ß√£o para converter entidade para dados de formul√°rio
export const {feature}ToFormValues = ({feature}: {Feature}): Create{Feature}Schema => ({
  nome: {feature}?.nome ?? '',
  // ... outros campos mapeados
  status: {feature}?.status ?? DefaultStatus.ATIVO,
});


### Exemplo Real (Unidade Prisional)

```typescript
import type { UnidadePrisional } from '../types';
import type { CreateUnidadePrisionalSchema } from '../schemas';

export const unidadePrisionalToFormValues = (
  unidade: UnidadePrisional
): CreateUnidadePrisionalSchema => ({
  nome: unidade?.nome ?? '',
});
````

## üéØ Interface CrudService (src/types/index.ts)

```typescript
export interface CrudService<TEntity, TCreate, TUpdate, TListParams> {
  paginate: (params: TListParams) => Promise<PaginatedResponse<TEntity>>;
  create: (data: TCreate) => Promise<TEntity>;
  read: (id: string) => Promise<TEntity>;
  update: (id: string, data: TUpdate) => Promise<TEntity>;
  delete: (id: string) => Promise<void>;
}

export interface PaginatedResponse<T> {
  readonly totalPages: number;
  readonly page: number;
  readonly limit: number;
  readonly total: number;
  readonly hasNextPage: boolean;
  readonly hasPrevPage: boolean;
  readonly items: T[];
}

export interface PaginatedParams {
  page: number;
  limit: number;
  search?: string;
  sort?: string;
  order?: 'asc' | 'desc';
}

export type AuditableEntity = {
  createdAt: string;
  updatedAt: string;
  created_by?: string;
  updated_by?: string;
};
```

## üîß Padr√µes de Implementa√ß√£o

### API Integration (Padr√£o Principal)

```typescript
// SEMPRE use a API gerada pelo Orval
import { getSAGEPCoreAPI } from 'src/api/generated';

const api = getSAGEPCoreAPI();

export const {feature}Service: CrudService<
  Read{Feature}Dto,
  Create{Feature}Dto,
  Update{Feature}Dto,
  PaginatedParams
> = {
  paginate: async ({ page, limit }) => api.{feature}FindAll({ page, limit }),
  create: async (data) => api.{feature}Create(data),
  read: async (id) => api.{feature}FindOne(id),
  update: async (id, data) => api.{feature}Update(id, data),
  delete: async (id) => api.{feature}Remove(id),
};
```

```typescript
// Para desenvolvimento, sempre forne√ßa dados mock realistas
export const {features}: {Feature}[] = [
  {
    {feature}_id: '1',
    nome: 'Jo√£o da Silva',
    cpf: '12345678900',
    // ... campos espec√≠ficos
    createdAt: '2024-01-01T10:00:00.000Z',
    updatedAt: '2024-01-01T10:00:00.000Z',
    created_by: '1',
    updated_by: '1',
  },
  // ... mais registros para teste de pagina√ß√£o
];
```

### Timestamps

```typescript
// SEMPRE use ISO string para datas
createdAt: new Date().toISOString(),
updatedAt: new Date().toISOString(),
```

### Error Handling

```typescript
// SEMPRE lance erros em portugu√™s com contexto
if (!{ feature }) {
  throw new Error('{Feature} n√£o encontrado');
}
```

## ‚ö†Ô∏è Regras Obrigat√≥rias

### Servi√ßo de Dados

1. **SEMPRE** implemente interface `CrudService` completa
2. **SEMPRE** use tipagem TypeScript forte
3. **SEMPRE** use a API gerada pelo Orval (padr√£o principal)
4. **SEMPRE** forne√ßa dados mock para desenvolvimento (quando necess√°rio)
5. **SEMPRE** retorne `PaginatedResponse` na pagina√ß√£o
6. **SEMPRE** use os tipos DTOs gerados pela API

### Helpers

1. **SEMPRE** crie fun√ß√£o `{feature}ToFormValues`
2. **SEMPRE** use valores padr√£o com `??` operator
3. **SEMPRE** mantenha fun√ß√µes pure (sem side effects)
4. **SEMPRE** use tipagem forte nos par√¢metros e retorno

### API Integration

1. **SEMPRE** use `getSAGEPCoreAPI()` para obter inst√¢ncia da API
2. **SEMPRE** mantenha mesmas assinaturas de m√©todos
3. **SEMPRE** trate erros adequadamente
4. **SEMPRE** use endpoints RESTful padr√£o
5. **SEMPRE** use tipos DTOs gerados automaticamente

### Nomenclatura

- **Service**: `{feature}Service` (ex: `unidadePrisionalService`)
- **Mock Array**: `{features}` (plural, ex: `unidadesPrisionais`)
- **Helper**: `{feature}ToFormValues` (ex: `unidadePrisionalToFormValues`)
- **API Methods**: `{feature}FindAll`, `{feature}Create`, `{feature}FindOne`, `{feature}Update`, `{feature}Remove`

## üöÄ Exemplo Completo (Unidade Prisional)

### data/index.ts

```typescript
import type { CrudService, PaginatedParams } from 'src/types';
import type {
  ReadUnidadePrisionalDto,
  CreateUnidadePrisionalDto,
  UpdateUnidadePrisionalDto,
} from 'src/api/generated';

import { getSAGEPCoreAPI } from 'src/api/generated';

const api = getSAGEPCoreAPI();

export const unidadePrisionalService: CrudService<
  ReadUnidadePrisionalDto,
  CreateUnidadePrisionalDto,
  UpdateUnidadePrisionalDto,
  PaginatedParams
> = {
  paginate: async ({ page, limit }) => api.unidadePrisionalFindAll({ page, limit }),
  create: async (data) => api.unidadePrisionalCreate(data),
  read: async (id) => api.unidadePrisionalFindOne(id),
  update: async (id, data) => api.unidadePrisionalUpdate(id, data),
  delete: async (id) => api.unidadePrisionalRemove(id),
};
```

### helper/index.ts

```typescript
import type { UnidadePrisional } from '../types';
import type { CreateUnidadePrisionalSchema } from '../schemas';

export const unidadePrisionalToFormValues = (
  unidade: UnidadePrisional
): CreateUnidadePrisionalSchema => ({
  nome: unidade?.nome ?? '',
});
```

### types/index.ts

```typescript
import type { AuditableEntity } from 'src/types';

export type UnidadePrisional = {
  unidade_id: string;
  nome: string;
} & AuditableEntity;

export type UnidadePrisionalListParams = {
  page: number;
  limit: number;
  search?: string;
};
```

### schemas/index.ts

```typescript
import { z } from 'zod';

export const createUnidadePrisionalSchema = z.object({
  nome: z.string().min(1, 'Nome √© obrigat√≥rio'),
});

export type CreateUnidadePrisionalSchema = z.infer<typeof createUnidadePrisionalSchema>;

export type UpdateUnidadePrisionalSchema = CreateUnidadePrisionalSchema;
```

description:
globs:
alwaysApply: false

---
