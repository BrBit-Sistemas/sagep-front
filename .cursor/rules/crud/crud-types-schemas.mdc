# üè∑Ô∏è Tipos e Schemas CRUD - SAGEP

## üìù Estrutura de Tipos (types/index.ts)

### Tipo Principal da Entidade

```typescript
// Padr√£o obrigat√≥rio para todas as entidades
export type {Feature} = {
  {feature}_id: string;           // ID √∫nico da entidade
  // ... campos espec√≠ficos da entidade
  createdAt: string;             // Data de cria√ß√£o (ISO string)
  updatedAt: string;             // Data de atualiza√ß√£o (ISO string)
  created_by?: string;            // ID do usu√°rio criador (opcional)
  updated_by?: string;            // ID do usu√°rio que atualizou (opcional)
};
```

### Enums (quando necess√°rio)

```typescript
// Use enums para campos com valores fixos
export enum StatusEnum {
  ATIVO = 'ATIVO',
  INATIVO = 'INATIVO',
  SUSPENSO = 'SUSPENSO',
}

export enum TipoEnum {
  TIPO_A = 'TIPO_A',
  TIPO_B = 'TIPO_B',
}
```

### Tipos para Par√¢metros de Listagem

```typescript
// Sempre inclua este tipo para pagina√ß√£o
export type {Feature}ListParams = {
  page: number;
  limit: number;
  search?: string;
  // ... outros filtros espec√≠ficos
};
```

### Exemplo Completo (Detento)

```typescript
export enum Regime {
  FECHADO = 'FECHADO',
  SEMIABERTO = 'SEMIABERTO',
  ABERTO = 'ABERTO',
}

export enum Escolaridade {
  FUNDAMENTAL = 'FUNDAMENTAL',
  MEDIO = 'MEDIO',
  SUPERIOR = 'SUPERIOR',
  ANALFABETO = 'ANALFABETO',
}

export type Detento = {
  detento_id: string;
  nome: string;
  prontuario: string;
  cpf: string;
  data_nascimento: string;
  regime: Regime;
  escolaridade: Escolaridade;
  unidade_id: string;
  createdAt: string;
  updatedAt: string;
  created_by?: string;
  updated_by?: string;
};

export type DetentoListParams = {
  page: number;
  limit: number;
  search?: string;
};
```

## üîç Estrutura de Schemas (schemas/index.ts)

### Schema de Cria√ß√£o

```typescript
import { z } from 'zod';
import { {Enum1}, {Enum2} } from '../types';

export const create{Feature}Schema = z.object({
  // Inclua TODOS os campos obrigat√≥rios para cria√ß√£o
  // EXCLUA: {feature}_id, createdAt, updatedAt, created_by, updated_by
  nome: z.string().min(1, 'Nome √© obrigat√≥rio'),
  // ... outros campos com valida√ß√µes apropriadas
  status: z.nativeEnum(StatusEnum).default(StatusEnum.ATIVO),
});

export type Create{Feature}Schema = z.infer<typeof create{Feature}Schema>;
```

### Schema de Atualiza√ß√£o

```typescript
// Sempre extenda o schema de cria√ß√£o
export type Update{Feature}Schema = Create{Feature}Schema & {
  {feature}Id: string
};
```

### Valida√ß√µes Comuns

```typescript
// CPF
cpf: z.string().min(11, 'CPF deve ter 11 d√≠gitos').max(14, 'CPF inv√°lido'),

// E-mail
email: z.string().email('E-mail inv√°lido'),

// Data
data_nascimento: z.string().min(1, 'Data √© obrigat√≥ria'),

// Relacionamentos
unidade_id: z.string().min(1, 'Unidade √© obrigat√≥ria'),

// Enums
regime: z.nativeEnum(Regime).default(Regime.FECHADO),

// Textos obrigat√≥rios
nome: z.string().min(1, 'Nome √© obrigat√≥rio'),
descricao: z.string().min(1, 'Descri√ß√£o √© obrigat√≥ria'),

// Textos opcionais
observacoes: z.string().optional(),

// N√∫meros
idade: z.number().min(0, 'Idade deve ser positiva'),
```

### Exemplo Completo (Detento)

```typescript
import { z } from 'zod';
import { Regime, Escolaridade } from '../types';

export const createDetentoSchema = z.object({
  nome: z.string().min(1, 'Nome √© obrigat√≥rio'),
  prontuario: z.string().min(1, 'Prontu√°rio √© obrigat√≥rio'),
  cpf: z.string().min(11, 'CPF deve ter 11 d√≠gitos').max(14, 'CPF inv√°lido'),
  data_nascimento: z.string().min(1, 'Data de nascimento √© obrigat√≥ria'),
  regime: z.nativeEnum(Regime).default(Regime.FECHADO),
  escolaridade: z.nativeEnum(Escolaridade).default(Escolaridade.FUNDAMENTAL),
  unidade_id: z.string().min(1, 'Unidade √© obrigat√≥ria'),
});

export type CreateDetentoSchema = z.infer<typeof createDetentoSchema>;
export type UpdateDetentoSchema = CreateDetentoSchema & { detentoId: string };
```

## ‚ö†Ô∏è Regras Obrigat√≥rias

### Tipos

1. **SEMPRE** use `{feature}_id` como identificador √∫nico
2. **SEMPRE** inclua `createdAt`, `updatedAt`, `created_by?`, `updated_by?`
3. **SEMPRE** use enums para campos com valores fixos
4. **SEMPRE** crie tipo `{Feature}ListParams` para pagina√ß√£o
5. **NUNCA** use `any` ou tipos gen√©ricos demais

### Schemas

1. **SEMPRE** use Zod para todas as valida√ß√µes
2. **SEMPRE** crie schemas separados para cria√ß√£o e atualiza√ß√£o
3. **SEMPRE** inclua mensagens de erro em portugu√™s
4. **SEMPRE** use `.default()` para enums quando apropriado
5. **NUNCA** inclua campos autogenerados nos schemas de cria√ß√£o

### Nomenclatura

- Tipos: PascalCase (`Detento`, `Unidade`)
- Enums: PascalCase (`Regime`, `Escolaridade`)
- Schemas: camelCase (`createDetentoSchema`)
- Campos: snake_case (`detento_id`, `data_nascimento`)

## üéØ Template R√°pido

```typescript
// types/index.ts
export enum {Feature}Status {
  ATIVO = 'ATIVO',
  INATIVO = 'INATIVO',
}

export type {Feature} = {
  {feature}_id: string;
  nome: string;
  status: {Feature}Status;
  createdAt: string;
  updatedAt: string;
  created_by?: string;
  updated_by?: string;
};

export type {Feature}ListParams = {
  page: number;
  limit: number;
  search?: string;
};

// schemas/index.ts
import { z } from 'zod';
import { {Feature}Status } from '../types';

export const create{Feature}Schema = z.object({
  nome: z.string().min(1, 'Nome √© obrigat√≥rio'),
  status: z.nativeEnum({Feature}Status).default({Feature}Status.ATIVO),
});

export type Create{Feature}Schema = z.infer<typeof create{Feature}Schema>;
export type Update{Feature}Schema = Create{Feature}Schema & { {feature}Id: string };
```

description:
globs:
alwaysApply: false

---
