import type { BodyType } from '../lib/axios';

/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * SAGEP Core API
 * OpenAPI spec version: 1.0
 */
import { customInstance } from '../lib/axios';

export interface LoginDto {
  /** Email do usuário */
  email: string;
  /** Senha do usuário */
  senha: string;
}

export interface LoginResponseDto {
  /** Token de acesso JWT */
  accessToken: string;
  /** Tipo de token */
  tokenType: string;
  /** ID do usuário autenticado */
  userId: string;
}

export interface Secretaria {
  /** Data de criação do registro */
  createdAt: string;
  /** Data da última atualização do registro */
  updatedAt: string;
  /** Data de exclusão do registro (soft delete) */
  deletedAt: string;
  /** ID único da secretaria */
  id: string;
  /** Nome da secretaria */
  nome: string;
}

export interface Regional {
  /** Data de criação do registro */
  createdAt: string;
  /** Data da última atualização do registro */
  updatedAt: string;
  /** Data de exclusão do registro (soft delete) */
  deletedAt: string;
  /** ID da regional */
  id: string;
  /** ID da secretaria */
  secretariaId: string;
  /** Nome da regional */
  nome: string;
}

export interface UnidadePrisional {
  /** Data de criação do registro */
  createdAt: string;
  /** Data da última atualização do registro */
  updatedAt: string;
  /** Data de exclusão do registro (soft delete) */
  deletedAt: string;
  /** ID da unidade prisional */
  id: string;
  /** Nome da unidade prisional */
  nome: string;
  /** ID da secretaria */
  secretariaId: string;
  /** ID da regional */
  regionalId: string;
}

export interface ReadUsuarioDto {
  /** Data de criação do registro */
  createdAt: string;
  /** Data de atualização do registro */
  updatedAt: string;
  /** Data de exclusão do registro */
  deletedAt: string;
  /** ID único do usuário */
  id: string;
  /** Nome completo do usuário */
  nome: string;
  /** Email do usuário */
  email: string;
  /** Secretaria do usuário */
  secretaria: Secretaria;
  /** Regional do usuário */
  regional: Regional;
  /** Unidade prisional do usuário */
  unidade: UnidadePrisional;
  /** Senha do usuário */
  senha: string;
  /** Papéis do usuário */
  roles: string[];
  /** Se o usuário é administrador */
  isAdmin: boolean;
}

export interface PaginateRolesDto {
  /** Total de páginas */
  totalPages: number;
  /** Número da página */
  page: number;
  /** Limite de itens por página */
  limit: number;
  /** Total de itens */
  total: number;
  /** Se há uma página posterior */
  hasNextPage: boolean;
  /** Se há uma página anterior */
  hasPrevPage: boolean;
  /** Itens da página */
  items: string[];
}

export interface CreateUsuarioDto {
  /** Nome completo do usuário */
  nome: string;
  /** Email do usuário */
  email: string;
  /**
   * Senha do usuário
   * @minLength 8
   * @maxLength 30
   */
  senha: string;
  /** ID da secretaria do usuário */
  secretariaId: string;
  /** ID da regional do usuário */
  regionalId: string;
  /** ID da unidade prisional do usuário */
  unidadeId: string;
}

export interface UpdateUsuarioDto {
  /** Nome completo do usuário */
  nome?: string;
  /** Email do usuário */
  email?: string;
  /**
   * Senha do usuário
   * @minLength 8
   * @maxLength 30
   */
  senha?: string;
  /** ID da secretaria do usuário */
  secretariaId?: string;
  /** ID da regional do usuário */
  regionalId?: string;
  /** ID da unidade prisional do usuário */
  unidadeId?: string;
}

export interface CreateSecretariaDto {
  /** Nome da secretaria */
  nome: string;
}

export interface ReadSecretariaDto {
  /** ID único da secretaria */
  id: string;
  /** Nome da secretaria */
  nome: string;
  /** Data de criação */
  createdAt: string;
  /** Data de atualização */
  updatedAt: string;
  /** Regionais vinculadas à secretaria */
  regionais?: Regional[];
  /** Unidades prisionais vinculadas à secretaria */
  unidades?: UnidadePrisional[];
}

export interface PaginateSecretariaDto {
  /** Total de páginas */
  totalPages: number;
  /** Número da página */
  page: number;
  /** Limite de itens por página */
  limit: number;
  /** Total de itens */
  total: number;
  /** Se há uma página posterior */
  hasNextPage: boolean;
  /** Se há uma página anterior */
  hasPrevPage: boolean;
  /** Itens da página */
  items: ReadSecretariaDto[];
}

export interface UpdateSecretariaDto {
  /** Nome da secretaria */
  nome?: string;
}

export interface CreateUnidadePrisionalDto {
  /** Nome da unidade prisional */
  nome: string;
  /** ID da regional */
  regionalId: string;
}

export interface ReadRegionalDto {
  /** ID da regional */
  id: string;
  /** ID da secretaria */
  secretariaId: string;
  /** Nome da regional */
  nome: string;
  /** Data de criação */
  createdAt: string;
  /** Data de atualização */
  updatedAt: string;
  /** Secretaria vinculada */
  secretaria?: ReadSecretariaDto;
  /** Unidades prisionais vinculadas à regional */
  unidades?: UnidadePrisional[];
}

export interface ReadUnidadePrisionalDto {
  /** ID da unidade prisional */
  id: string;
  /** Nome da unidade prisional */
  nome: string;
  /** ID da secretaria */
  secretariaId: string;
  /** ID da regional */
  regionalId: string;
  /** Data de criação */
  createdAt: string;
  /** Data de atualização */
  updatedAt: string;
  /** Secretaria vinculada */
  secretaria?: ReadSecretariaDto;
  /** Regional vinculada */
  regional?: ReadRegionalDto;
}

export interface PaginateUnidadePrisionalDto {
  /** Total de páginas */
  totalPages: number;
  /** Número da página */
  page: number;
  /** Limite de itens por página */
  limit: number;
  /** Total de itens */
  total: number;
  /** Se há uma página posterior */
  hasNextPage: boolean;
  /** Se há uma página anterior */
  hasPrevPage: boolean;
  /** Itens da página */
  items: ReadUnidadePrisionalDto[];
}

export interface UpdateUnidadePrisionalDto {
  /** Nome da unidade prisional */
  nome?: string;
  /** ID da regional */
  regionalId?: string;
}

export interface CreateRegionalDto {
  /** Nome da regional */
  nome: string;
  /** ID da secretaria */
  secretariaId: string;
}

export interface PaginateRegionalDto {
  /** Total de páginas */
  totalPages: number;
  /** Número da página */
  page: number;
  /** Limite de itens por página */
  limit: number;
  /** Total de itens */
  total: number;
  /** Se há uma página posterior */
  hasNextPage: boolean;
  /** Se há uma página anterior */
  hasPrevPage: boolean;
  /** Itens da página */
  items: ReadRegionalDto[];
}

export interface UpdateRegionalDto {
  /** Nome da regional */
  nome?: string;
  /** ID da secretaria */
  secretariaId?: string;
}

/**
 * @nullable
 */
export type HealthControllerCheck200Info = {
  [key: string]: {
    status: string;
    [key: string]: unknown;
  };
} | null;

/**
 * @nullable
 */
export type HealthControllerCheck200Error = {
  [key: string]: {
    status: string;
    [key: string]: unknown;
  };
} | null;

export type HealthControllerCheck200Details = {
  [key: string]: {
    status: string;
    [key: string]: unknown;
  };
};

export type HealthControllerCheck200 = {
  status?: string;
  /** @nullable */
  info?: HealthControllerCheck200Info;
  /** @nullable */
  error?: HealthControllerCheck200Error;
  details?: HealthControllerCheck200Details;
};

/**
 * @nullable
 */
export type HealthControllerCheck503Info = {
  [key: string]: {
    status: string;
    [key: string]: unknown;
  };
} | null;

/**
 * @nullable
 */
export type HealthControllerCheck503Error = {
  [key: string]: {
    status: string;
    [key: string]: unknown;
  };
} | null;

export type HealthControllerCheck503Details = {
  [key: string]: {
    status: string;
    [key: string]: unknown;
  };
};

export type HealthControllerCheck503 = {
  status?: string;
  /** @nullable */
  info?: HealthControllerCheck503Info;
  /** @nullable */
  error?: HealthControllerCheck503Error;
  details?: HealthControllerCheck503Details;
};

export type AuthControllerPaginateRolesParams = {
  /**
   * Número da página
   * @minimum 0
   */
  page?: number;
  /**
   * Quantidade de itens por página
   * @minimum 1
   */
  limit?: number;
  /**
   * Filtro para a busca
   */
  search?: string;
};

export type UsuarioControllerPaginateParams = {
  /**
   * Número da página
   * @minimum 0
   */
  page?: number;
  /**
   * Quantidade de itens por página
   * @minimum 1
   */
  limit?: number;
  /**
   * Filtro para a busca
   */
  search?: string;
};

export type SecretariaControllerFindAllParams = {
  /**
   * Número da página
   * @minimum 0
   */
  page?: number;
  /**
   * Quantidade de itens por página
   * @minimum 1
   */
  limit?: number;
  /**
   * Filtro para a busca
   */
  search?: string;
};

export type UnidadePrisionalControllerFindAllParams = {
  /**
   * Número da página
   * @minimum 0
   */
  page?: number;
  /**
   * Quantidade de itens por página
   * @minimum 1
   */
  limit?: number;
  /**
   * Filtro para a busca
   */
  search?: string;
};

export type RegionalControllerFindAllParams = {
  /**
   * Número da página
   * @minimum 0
   */
  page?: number;
  /**
   * Quantidade de itens por página
   * @minimum 1
   */
  limit?: number;
  /**
   * Filtro para a busca
   */
  search?: string;
};

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getSAGEPCoreAPI = () => {
  const healthCheck = (options?: SecondParameter<typeof customInstance>) =>
    customInstance<HealthControllerCheck200>({ url: `/health`, method: 'GET' }, options);

  /**
   * @summary Autenticar usuário
   */
  const authLogin = (
    loginDto: BodyType<LoginDto>,
    options?: SecondParameter<typeof customInstance>
  ) =>
    customInstance<LoginResponseDto>(
      {
        url: `/auth/login`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: loginDto,
      },
      options
    );

  /**
   * @summary Obter perfil do usuário autenticado
   */
  const authMe = (options?: SecondParameter<typeof customInstance>) =>
    customInstance<ReadUsuarioDto>({ url: `/auth/me`, method: 'GET' }, options);

  /**
   * @summary Obter todos os papéis
   */
  const authPaginateRoles = (
    params?: AuthControllerPaginateRolesParams,
    options?: SecondParameter<typeof customInstance>
  ) => customInstance<PaginateRolesDto>({ url: `/auth/roles`, method: 'GET', params }, options);

  /**
   * @summary Criar um novo usuário
   */
  const usuarioCreate = (
    createUsuarioDto: BodyType<CreateUsuarioDto>,
    options?: SecondParameter<typeof customInstance>
  ) =>
    customInstance<ReadUsuarioDto>(
      {
        url: `/usuarios`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: createUsuarioDto,
      },
      options
    );

  /**
   * @summary Listar todos os usuários
   */
  const usuarioPaginate = (
    params?: UsuarioControllerPaginateParams,
    options?: SecondParameter<typeof customInstance>
  ) => customInstance<ReadUsuarioDto[]>({ url: `/usuarios`, method: 'GET', params }, options);

  /**
   * @summary Buscar um usuário pelo ID
   */
  const usuarioFindOne = (id: string, options?: SecondParameter<typeof customInstance>) =>
    customInstance<ReadUsuarioDto>({ url: `/usuarios/${id}`, method: 'GET' }, options);

  /**
   * @summary Atualizar um usuário pelo ID
   */
  const usuarioUpdate = (
    id: string,
    updateUsuarioDto: BodyType<UpdateUsuarioDto>,
    options?: SecondParameter<typeof customInstance>
  ) =>
    customInstance<ReadUsuarioDto>(
      {
        url: `/usuarios/${id}`,
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        data: updateUsuarioDto,
      },
      options
    );

  /**
   * @summary Remover um usuário pelo ID
   */
  const usuarioRemove = (id: string, options?: SecondParameter<typeof customInstance>) =>
    customInstance<void>({ url: `/usuarios/${id}`, method: 'DELETE' }, options);

  /**
   * @summary Criar uma nova secretaria
   */
  const secretariaCreate = (
    createSecretariaDto: BodyType<CreateSecretariaDto>,
    options?: SecondParameter<typeof customInstance>
  ) =>
    customInstance<ReadSecretariaDto>(
      {
        url: `/secretarias`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: createSecretariaDto,
      },
      options
    );

  /**
   * @summary Listar todas as secretarias
   */
  const secretariaFindAll = (
    params?: SecretariaControllerFindAllParams,
    options?: SecondParameter<typeof customInstance>
  ) =>
    customInstance<PaginateSecretariaDto>({ url: `/secretarias`, method: 'GET', params }, options);

  /**
   * @summary Buscar uma secretaria pelo ID
   */
  const secretariaFindOne = (id: string, options?: SecondParameter<typeof customInstance>) =>
    customInstance<ReadSecretariaDto>({ url: `/secretarias/${id}`, method: 'GET' }, options);

  /**
   * @summary Atualizar uma secretaria pelo ID
   */
  const secretariaUpdate = (
    id: string,
    updateSecretariaDto: BodyType<UpdateSecretariaDto>,
    options?: SecondParameter<typeof customInstance>
  ) =>
    customInstance<ReadSecretariaDto>(
      {
        url: `/secretarias/${id}`,
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        data: updateSecretariaDto,
      },
      options
    );

  /**
   * @summary Remover uma secretaria pelo ID
   */
  const secretariaRemove = (id: string, options?: SecondParameter<typeof customInstance>) =>
    customInstance<void>({ url: `/secretarias/${id}`, method: 'DELETE' }, options);

  /**
   * @summary Criar uma nova unidade prisional
   */
  const unidadePrisionalCreate = (
    createUnidadePrisionalDto: BodyType<CreateUnidadePrisionalDto>,
    options?: SecondParameter<typeof customInstance>
  ) =>
    customInstance<ReadUnidadePrisionalDto>(
      {
        url: `/unidades-prisionais`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: createUnidadePrisionalDto,
      },
      options
    );

  /**
   * @summary Listar todas as unidades prisionais
   */
  const unidadePrisionalFindAll = (
    params?: UnidadePrisionalControllerFindAllParams,
    options?: SecondParameter<typeof customInstance>
  ) =>
    customInstance<PaginateUnidadePrisionalDto>(
      { url: `/unidades-prisionais`, method: 'GET', params },
      options
    );

  /**
   * @summary Buscar uma unidade prisional pelo ID
   */
  const unidadePrisionalFindOne = (id: string, options?: SecondParameter<typeof customInstance>) =>
    customInstance<ReadUnidadePrisionalDto>(
      { url: `/unidades-prisionais/${id}`, method: 'GET' },
      options
    );

  /**
   * @summary Atualizar uma unidade prisional pelo ID
   */
  const unidadePrisionalUpdate = (
    id: string,
    updateUnidadePrisionalDto: BodyType<UpdateUnidadePrisionalDto>,
    options?: SecondParameter<typeof customInstance>
  ) =>
    customInstance<ReadUnidadePrisionalDto>(
      {
        url: `/unidades-prisionais/${id}`,
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        data: updateUnidadePrisionalDto,
      },
      options
    );

  /**
   * @summary Remover uma unidade prisional pelo ID
   */
  const unidadePrisionalRemove = (id: string, options?: SecondParameter<typeof customInstance>) =>
    customInstance<void>({ url: `/unidades-prisionais/${id}`, method: 'DELETE' }, options);

  /**
   * @summary Criar uma nova regional
   */
  const regionalCreate = (
    createRegionalDto: BodyType<CreateRegionalDto>,
    options?: SecondParameter<typeof customInstance>
  ) =>
    customInstance<ReadRegionalDto>(
      {
        url: `/regionais`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: createRegionalDto,
      },
      options
    );

  /**
   * @summary Listar todas as regionais de uma secretaria
   */
  const regionalFindAll = (
    params?: RegionalControllerFindAllParams,
    options?: SecondParameter<typeof customInstance>
  ) => customInstance<PaginateRegionalDto>({ url: `/regionais`, method: 'GET', params }, options);

  /**
   * @summary Buscar uma regional pelo ID
   */
  const regionalFindOne = (id: string, options?: SecondParameter<typeof customInstance>) =>
    customInstance<ReadRegionalDto>({ url: `/regionais/${id}`, method: 'GET' }, options);

  /**
   * @summary Atualizar uma regional pelo ID
   */
  const regionalUpdate = (
    id: string,
    updateRegionalDto: BodyType<UpdateRegionalDto>,
    options?: SecondParameter<typeof customInstance>
  ) =>
    customInstance<ReadRegionalDto>(
      {
        url: `/regionais/${id}`,
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        data: updateRegionalDto,
      },
      options
    );

  /**
   * @summary Remover uma regional pelo ID
   */
  const regionalRemove = (id: string, options?: SecondParameter<typeof customInstance>) =>
    customInstance<void>({ url: `/regionais/${id}`, method: 'DELETE' }, options);

  return {
    healthCheck,
    authLogin,
    authMe,
    authPaginateRoles,
    usuarioCreate,
    usuarioPaginate,
    usuarioFindOne,
    usuarioUpdate,
    usuarioRemove,
    secretariaCreate,
    secretariaFindAll,
    secretariaFindOne,
    secretariaUpdate,
    secretariaRemove,
    unidadePrisionalCreate,
    unidadePrisionalFindAll,
    unidadePrisionalFindOne,
    unidadePrisionalUpdate,
    unidadePrisionalRemove,
    regionalCreate,
    regionalFindAll,
    regionalFindOne,
    regionalUpdate,
    regionalRemove,
  };
};
export type HealthCheckResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSAGEPCoreAPI>['healthCheck']>>
>;
export type AuthLoginResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSAGEPCoreAPI>['authLogin']>>
>;
export type AuthMeResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSAGEPCoreAPI>['authMe']>>
>;
export type AuthPaginateRolesResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSAGEPCoreAPI>['authPaginateRoles']>>
>;
export type UsuarioCreateResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSAGEPCoreAPI>['usuarioCreate']>>
>;
export type UsuarioPaginateResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSAGEPCoreAPI>['usuarioPaginate']>>
>;
export type UsuarioFindOneResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSAGEPCoreAPI>['usuarioFindOne']>>
>;
export type UsuarioUpdateResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSAGEPCoreAPI>['usuarioUpdate']>>
>;
export type UsuarioRemoveResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSAGEPCoreAPI>['usuarioRemove']>>
>;
export type SecretariaCreateResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSAGEPCoreAPI>['secretariaCreate']>>
>;
export type SecretariaFindAllResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSAGEPCoreAPI>['secretariaFindAll']>>
>;
export type SecretariaFindOneResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSAGEPCoreAPI>['secretariaFindOne']>>
>;
export type SecretariaUpdateResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSAGEPCoreAPI>['secretariaUpdate']>>
>;
export type SecretariaRemoveResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSAGEPCoreAPI>['secretariaRemove']>>
>;
export type UnidadePrisionalCreateResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSAGEPCoreAPI>['unidadePrisionalCreate']>>
>;
export type UnidadePrisionalFindAllResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSAGEPCoreAPI>['unidadePrisionalFindAll']>>
>;
export type UnidadePrisionalFindOneResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSAGEPCoreAPI>['unidadePrisionalFindOne']>>
>;
export type UnidadePrisionalUpdateResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSAGEPCoreAPI>['unidadePrisionalUpdate']>>
>;
export type UnidadePrisionalRemoveResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSAGEPCoreAPI>['unidadePrisionalRemove']>>
>;
export type RegionalCreateResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSAGEPCoreAPI>['regionalCreate']>>
>;
export type RegionalFindAllResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSAGEPCoreAPI>['regionalFindAll']>>
>;
export type RegionalFindOneResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSAGEPCoreAPI>['regionalFindOne']>>
>;
export type RegionalUpdateResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSAGEPCoreAPI>['regionalUpdate']>>
>;
export type RegionalRemoveResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSAGEPCoreAPI>['regionalRemove']>>
>;
